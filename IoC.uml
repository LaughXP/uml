@startuml
start
-> 启动容器ApplicationContext(由ClassPathXmlApplicationContext进行实现);
:执行refresh();
#red:调用BeanFactoryPostProcessor的
postProcessBeanFactory()方法对工厂定义信息进行后处理;
note right
容器后处理接口方法:
属于容器级别
比如:PropertyPlaceholderConfigurer
在应用上下文完成之后立即调用
end note
:执行registerBeanPostProcessors()方法注册Bean后处理方法;
:执行finishBeanFactoryInitialization()进行Bean实例;
->调用getBean()实例化单个Bean;
#yellow:调用InstantiationAwareBeanPostProcessor的
postProcessBeforeInstantiation()方法;
note right
Bean后处理接口方法(黄色流程):
属于容器级别
顶级接口BeanPostProcessor
这些接口不由Bean实现，独立于Bean
由容器进行加载，在Bean实例化的合适阶段进行调用
并且作用与所有的Bean
Spring AOP就是通过BeanPostProcessor进行实施的
end note
#DeepSkyBlue:实例化;
note right
Bean自身方法(蓝色流程):
如调用Bean构造函数初始化
调用Setter设置Bean属性
调用<bean>的init-method和destory-method所指定的方法
end note
#yellow:调用InstantiationAwareBeanPostProcessor的
postProcessAfterInstantiation()方法;
#yellow:调用InstantiationAwareBeanPostProcessor的
postProcessPropertyValues()方法;
#DeepSkyBlue:设置属性值;
#pink:调用BeanNameAware的setBeanName()方法;
note right
Bean级别接口方法(粉色流程):
由Bean自身实现的接口方法
例如Bean实现BeanNameAware接口，
使Bean可以得到BeanName的值
end note
#pink:调用BeanClassLoaderAware的setBeanClassLoader()方法;
#pink:调用BeanFactoryAware的setBeanFactory()方法;
#yellow:调用BeanPostProcessor的postProcessBeforeInitialization()方法;
#pink:调用InitializingBean的afterPropertiesSet()方法;
#DeepSkyBlue:通过init-method属性配置的初始方法;
#yellow:调用BeanPostProcessor的postProcessAfterInitialization()方法;
if(Bean作用域) then(singleton)
:将准备就绪的Bean存储于Spring缓冲池中;
->容器销毁;
#pink:调用DisposableBean的destroy()方法;
#DeepSkyBlue:通过destory-method属性配置的销毁方法;
else(prototype)
:将准备就绪的Bean交给调用者，从此摆脱Spring的生命周期管理;
endif

stop
@enduml
