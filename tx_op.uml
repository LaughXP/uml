@startuml
start
:Spring初始化Bean完成;
:遍历所有的BeanPostProcessor;
:执行InfrastructureAdvisorAutoProxyCreator的
postProcessAfterInitialization()方法;
:查询所有实现了Advisor的切面;
:查找与当前Bean匹配的切面;
note right
从Advisor中获得PointCut
去执行PointCut的matches方法
matches方法又调用
AnnotationTransactionAttributeSource#getTransactionAttribute()
去匹配@Transactional注解，并保存注解的内容
end note
:创建代理类;
note right
使用JdkDynamicAopProxy(该类实现了InvocationHandler接口)类的getProxy方法生成代理类。
该方法调用了jdk的动态代理api: Proxy.newProxyInstance(classLoader, proxiedInterfaces, this)
参数this就是JdkDynamicAopProxy类本身，该类将匹配的切面(包含TransactionInterceptor)保存在了自身的属性advised中
end note
:加入容器;
end
@enduml
