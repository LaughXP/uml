<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="1412px" preserveAspectRatio="none" style="width:796px;height:1412px;" version="1.1" viewBox="0 0 796 1412"
    width="796px" zoomAndPan="magnify"><defs><filter height="300%" id="fr9lyuqkhvip0" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><ellipse cx="294.5" cy="20" fill="#000000" filter="url(#fr9lyuqkhvip0)" rx="10" ry="10" style="stroke: none; stroke-width: 1.0;"/><rect fill="#FEFECE" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="93" x="248" y="71.2754"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="73" x="258" y="92.877">执行refresh()</text><polygon fill="#FBFB77" filter="url(#fr9lyuqkhvip0)" points="481.5,115.4082,481.5,186.6504,723.5,186.6504,723.5,125.4082,713.5,115.4082,481.5,115.4082" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FBFB77" points="481.5,115.4082,481.5,147.0293,461.5,151.0293,481.5,155.0293,481.5,186.6504,723.5,186.6504,723.5,125.4082,713.5,115.4082,481.5,115.4082" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="713.5" x2="713.5" y1="115.4082" y2="125.4082"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="723.5" x2="713.5" y1="125.4082" y2="125.4082"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="121" x="487.5" y="132.9766">容器后处理接口方法:</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="78" x="487.5" y="148.2871">属于容器级别</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="221" x="487.5" y="163.5977">比如:PropertyPlaceholderConfigurer</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="182" x="487.5" y="178.9082">在应用上下文完成之后立即调用</text><rect fill="#FF0000" filter="url(#fr9lyuqkhvip0)" height="48.2656" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="334" x="127.5" y="126.8965"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="185" x="137.5" y="148.498">调用BeanFactoryPostProcessor的</text><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="314" x="137.5" y="162.6309">postProcessBeanFactory()方法对工厂定义信息进行后处理</text><rect fill="#FEFECE" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="346" x="121.5" y="206.6504"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="326" x="131.5" y="228.252">执行registerBeanPostProcessors()方法注册Bean后处理方法</text><rect fill="#FEFECE" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="295" x="147" y="260.7832"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="275" x="157" y="282.3848">执行finishBeanFactoryInitialization()进行Bean实例</text><polygon fill="#FBFB77" filter="url(#fr9lyuqkhvip0)" points="449,318.9644,449,436.1382,774,436.1382,774,328.9644,764,318.9644,449,318.9644" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FBFB77" points="449,318.9644,449,373.5513,429,377.5513,449,381.5513,449,436.1382,774,436.1382,774,328.9644,764,318.9644,449,318.9644" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="764" x2="764" y1="318.9644" y2="328.9644"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="774" x2="764" y1="328.9644" y2="328.9644"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="184" x="455" y="336.5327">Bean后处理接口方法(黄色流程):</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="78" x="455" y="351.8433">属于容器级别</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="169" x="455" y="367.1538">顶级接口BeanPostProcessor</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="214" x="455" y="382.4644">这些接口不由Bean实现，独立于Bean</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="302" x="455" y="397.7749">由容器进行加载，在Bean实例化的合适阶段进行调用</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="133" x="455" y="413.0854">并且作用与所有的Bean</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="304" x="455" y="428.396">Spring AOP就是通过BeanPostProcessor进行实施的</text><rect fill="#FFFF00" filter="url(#fr9lyuqkhvip0)" height="48.2656" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="269" x="160" y="353.4185"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="249" x="170" y="375.02">调用InstantiationAwareBeanPostProcessor的</text><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="207" x="170" y="389.1528">postProcessBeforeInstantiation()方法</text><polygon fill="#FBFB77" filter="url(#fr9lyuqkhvip0)" points="342.5,446.1382,342.5,517.3804,723.5,517.3804,723.5,456.1382,713.5,446.1382,342.5,446.1382" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FBFB77" points="342.5,446.1382,342.5,477.7593,322.5,481.7593,342.5,485.7593,342.5,517.3804,723.5,517.3804,723.5,456.1382,713.5,446.1382,342.5,446.1382" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="713.5" x2="713.5" y1="446.1382" y2="456.1382"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="723.5" x2="713.5" y1="456.1382" y2="456.1382"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="145" x="348.5" y="463.7065">Bean自身方法(蓝色流程):</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="159" x="348.5" y="479.0171">如调用Bean构造函数初始化</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="143" x="348.5" y="494.3276">调用Setter设置Bean属性</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="360" x="348.5" y="509.6382">调用&lt;bean&gt;的init-method和destory-method所指定的方法</text><rect fill="#00BFFF" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="56" x="266.5" y="464.6929"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="36" x="276.5" y="486.2944">实例化</text><rect fill="#FFFF00" filter="url(#fr9lyuqkhvip0)" height="48.2656" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="269" x="160" y="537.3804"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="249" x="170" y="558.9819">调用InstantiationAwareBeanPostProcessor的</text><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="198" x="170" y="573.1147">postProcessAfterInstantiation()方法</text><rect fill="#FFFF00" filter="url(#fr9lyuqkhvip0)" height="48.2656" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="269" x="160" y="605.646"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="249" x="170" y="627.2476">调用InstantiationAwareBeanPostProcessor的</text><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="188" x="170" y="641.3804">postProcessPropertyValues()方法</text><rect fill="#00BFFF" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="80" x="254.5" y="673.9116"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="264.5" y="695.5132">设置属性值</text><polygon fill="#FBFB77" filter="url(#fr9lyuqkhvip0)" points="447,718.0444,447,789.2866,691,789.2866,691,728.0444,681,718.0444,447,718.0444" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FBFB77" points="447,718.0444,447,749.6655,427,753.6655,447,757.6655,447,789.2866,691,789.2866,691,728.0444,681,718.0444,447,718.0444" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="681" x2="681" y1="718.0444" y2="728.0444"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="691" x2="681" y1="728.0444" y2="728.0444"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="171" x="453" y="735.6128">Bean级别接口方法(粉色流程):</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="159" x="453" y="750.9233">由Bean自身实现的接口方法</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="223" x="453" y="766.2339">例如Bean实现BeanNameAware接口，</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="185" x="453" y="781.5444">使Bean可以得到BeanName的值</text><rect fill="#FFC0CB" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="265" x="162" y="736.5991"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="245" x="172" y="758.2007">调用BeanNameAware的setBeanName()方法</text><rect fill="#FFC0CB" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="337" x="126" y="809.2866"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="317" x="136" y="830.8882">调用BeanClassLoaderAware的setBeanClassLoader()方法</text><rect fill="#FFC0CB" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="279" x="155" y="863.4194"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="259" x="165" y="885.021">调用BeanFactoryAware的setBeanFactory()方法</text><rect fill="#FFFF00" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="370" x="109.5" y="917.5522"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="350" x="119.5" y="939.1538">调用BeanPostProcessor的postProcessBeforeInitialization()方法</text><rect fill="#FFC0CB" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="276" x="156.5" y="971.6851"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="256" x="166.5" y="993.2866">调用InitializingBean的afterPropertiesSet()方法</text><rect fill="#00BFFF" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="220" x="184.5" y="1025.8179"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="200" x="194.5" y="1047.4194">通过init-method属性配置的初始方法</text><rect fill="#FFFF00" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="361" x="114" y="1079.9507"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="341" x="124" y="1101.5522">调用BeanPostProcessor的postProcessAfterInitialization()方法</text><polygon fill="#FEFECE" filter="url(#fr9lyuqkhvip0)" points="265.5,1134.0835,323.5,1134.0835,335.5,1146.0835,323.5,1158.0835,265.5,1158.0835,253.5,1146.0835,265.5,1134.0835" style="stroke: #A80036; stroke-width: 1.5;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="58" x="265.5" y="1150.2407">Bean作用域</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="50" x="203.5" y="1143.7632">singleton</text><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="53" x="335.5" y="1143.7632">prototype</text><rect fill="#FEFECE" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="240" x="13" y="1168.0835"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="220" x="23" y="1189.6851">将准备就绪的Bean存储于Spring缓冲池中</text><rect fill="#FFC0CB" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="223" x="21.5" y="1243.4917"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="203" x="31.5" y="1265.0933">调用DisposableBean的destroy()方法</text><rect fill="#00BFFF" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="246" x="10" y="1297.6245"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="226" x="20" y="1319.2261">通过destory-method属性配置的销毁方法</text><rect fill="#FEFECE" filter="url(#fr9lyuqkhvip0)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="360" x="276" y="1168.0835"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="340" x="286" y="1189.6851">将准备就绪的Bean交给调用者，从此摆脱Spring的生命周期管理</text><polygon fill="#FEFECE" filter="url(#fr9lyuqkhvip0)" points="294.5,1337.7573,306.5,1349.7573,294.5,1361.7573,282.5,1349.7573,294.5,1337.7573" style="stroke: #A80036; stroke-width: 1.5;"/><ellipse cx="294.5" cy="1391.7573" fill="none" filter="url(#fr9lyuqkhvip0)" rx="10" ry="10" style="stroke: #000000; stroke-width: 1.0;"/><ellipse cx="295" cy="1392.2573" fill="#000000" filter="url(#fr9lyuqkhvip0)" rx="6" ry="6" style="stroke: none; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="30" y2="71.2754"/><polygon fill="#A80036" points="290.5,61.2754,294.5,71.2754,298.5,61.2754,294.5,65.2754" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="387" x="298.5" y="51.4551">启动容器ApplicationContext(由ClassPathXmlApplicationContext进行实现)</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="105.4082" y2="126.8965"/><polygon fill="#A80036" points="290.5,116.8965,294.5,126.8965,298.5,116.8965,294.5,120.8965" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="175.1621" y2="206.6504"/><polygon fill="#A80036" points="290.5,196.6504,294.5,206.6504,298.5,196.6504,294.5,200.6504" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="240.7832" y2="260.7832"/><polygon fill="#A80036" points="290.5,250.7832,294.5,260.7832,298.5,250.7832,294.5,254.7832" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="294.916" y2="353.4185"/><polygon fill="#A80036" points="290.5,343.4185,294.5,353.4185,298.5,343.4185,294.5,347.4185" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="152" x="298.5" y="316.3711">调用getBean()实例化单个Bean</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="401.6841" y2="464.6929"/><polygon fill="#A80036" points="290.5,454.6929,294.5,464.6929,298.5,454.6929,294.5,458.6929" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="498.8257" y2="537.3804"/><polygon fill="#A80036" points="290.5,527.3804,294.5,537.3804,298.5,527.3804,294.5,531.3804" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="585.646" y2="605.646"/><polygon fill="#A80036" points="290.5,595.646,294.5,605.646,298.5,595.646,294.5,599.646" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="653.9116" y2="673.9116"/><polygon fill="#A80036" points="290.5,663.9116,294.5,673.9116,298.5,663.9116,294.5,667.9116" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="708.0444" y2="736.5991"/><polygon fill="#A80036" points="290.5,726.5991,294.5,736.5991,298.5,726.5991,294.5,730.5991" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="770.7319" y2="809.2866"/><polygon fill="#A80036" points="290.5,799.2866,294.5,809.2866,298.5,799.2866,294.5,803.2866" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="843.4194" y2="863.4194"/><polygon fill="#A80036" points="290.5,853.4194,294.5,863.4194,298.5,853.4194,294.5,857.4194" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="897.5522" y2="917.5522"/><polygon fill="#A80036" points="290.5,907.5522,294.5,917.5522,298.5,907.5522,294.5,911.5522" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="951.6851" y2="971.6851"/><polygon fill="#A80036" points="290.5,961.6851,294.5,971.6851,298.5,961.6851,294.5,965.6851" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="1005.8179" y2="1025.8179"/><polygon fill="#A80036" points="290.5,1015.8179,294.5,1025.8179,298.5,1015.8179,294.5,1019.8179" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="1059.9507" y2="1079.9507"/><polygon fill="#A80036" points="290.5,1069.9507,294.5,1079.9507,298.5,1069.9507,294.5,1073.9507" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="133" x2="133" y1="1202.2163" y2="1243.4917"/><polygon fill="#A80036" points="129,1233.4917,133,1243.4917,137,1233.4917,133,1237.4917" style="stroke: #A80036; stroke-width: 1.0;"/><text fill="#000000" font-family="sans-serif" font-size="11" lengthAdjust="spacingAndGlyphs" textLength="44" x="137" y="1223.6714">容器销毁</text><line style="stroke: #A80036; stroke-width: 1.5;" x1="133" x2="133" y1="1277.6245" y2="1297.6245"/><polygon fill="#A80036" points="129,1287.6245,133,1297.6245,137,1287.6245,133,1291.6245" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="253.5" x2="133" y1="1146.0835" y2="1146.0835"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="133" x2="133" y1="1146.0835" y2="1168.0835"/><polygon fill="#A80036" points="129,1158.0835,133,1168.0835,137,1158.0835,133,1162.0835" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="335.5" x2="456" y1="1146.0835" y2="1146.0835"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="456" x2="456" y1="1146.0835" y2="1168.0835"/><polygon fill="#A80036" points="452,1158.0835,456,1168.0835,460,1158.0835,456,1162.0835" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="133" x2="133" y1="1331.7573" y2="1349.7573"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="133" x2="282.5" y1="1349.7573" y2="1349.7573"/><polygon fill="#A80036" points="272.5,1345.7573,282.5,1349.7573,272.5,1353.7573,276.5,1349.7573" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="456" x2="456" y1="1202.2163" y2="1349.7573"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="456" x2="306.5" y1="1349.7573" y2="1349.7573"/><polygon fill="#A80036" points="316.5,1345.7573,306.5,1349.7573,316.5,1353.7573,312.5,1349.7573" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="1114.0835" y2="1134.0835"/><polygon fill="#A80036" points="290.5,1124.0835,294.5,1134.0835,298.5,1124.0835,294.5,1128.0835" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="294.5" x2="294.5" y1="1361.7573" y2="1381.7573"/><polygon fill="#A80036" points="290.5,1371.7573,294.5,1381.7573,298.5,1371.7573,294.5,1375.7573" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml
start
-> 启动容器ApplicationContext(由ClassPathXmlApplicationContext进行实现);
:执行refresh();
#red:调用BeanFactoryPostProcessor的
postProcessBeanFactory()方法对工厂定义信息进行后处理;
note right
容器后处理接口方法:
属于容器级别
比如:PropertyPlaceholderConfigurer
在应用上下文完成之后立即调用
end note
:执行registerBeanPostProcessors()方法注册Bean后处理方法;
:执行finishBeanFactoryInitialization()进行Bean实例;
->调用getBean()实例化单个Bean;
#yellow:调用InstantiationAwareBeanPostProcessor的
postProcessBeforeInstantiation()方法;
note right
Bean后处理接口方法(黄色流程):
属于容器级别
顶级接口BeanPostProcessor
这些接口不由Bean实现，独立于Bean
由容器进行加载，在Bean实例化的合适阶段进行调用
并且作用与所有的Bean
Spring AOP就是通过BeanPostProcessor进行实施的
end note
#DeepSkyBlue:实例化;
note right
Bean自身方法(蓝色流程):
如调用Bean构造函数初始化
调用Setter设置Bean属性
调用<bean>的init-method和destory-method所指定的方法
end note
#yellow:调用InstantiationAwareBeanPostProcessor的
postProcessAfterInstantiation()方法;
#yellow:调用InstantiationAwareBeanPostProcessor的
postProcessPropertyValues()方法;
#DeepSkyBlue:设置属性值;
#pink:调用BeanNameAware的setBeanName()方法;
note right
Bean级别接口方法(粉色流程):
由Bean自身实现的接口方法
例如Bean实现BeanNameAware接口，
使Bean可以得到BeanName的值
end note
#pink:调用BeanClassLoaderAware的setBeanClassLoader()方法;
#pink:调用BeanFactoryAware的setBeanFactory()方法;
#yellow:调用BeanPostProcessor的postProcessBeforeInitialization()方法;
#pink:调用InitializingBean的afterPropertiesSet()方法;
#DeepSkyBlue:通过init-method属性配置的初始方法;
#yellow:调用BeanPostProcessor的postProcessAfterInitialization()方法;
if(Bean作用域) then(singleton)
:将准备就绪的Bean存储于Spring缓冲池中;
->容器销毁;
#pink:调用DisposableBean的destroy()方法;
#DeepSkyBlue:通过destory-method属性配置的销毁方法;
else(prototype)
:将准备就绪的Bean交给调用者，从此摆脱Spring的生命周期管理;
endif

stop
@enduml

PlantUML version 1.2017.16(Sun Sep 03 18:53:37 CST 2017)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 1.8.0_121-b13
Operating System: Mac OS X
OS Version: 10.13
Default Encoding: US-ASCII
Language: zh
Country: CN
--></g></svg>