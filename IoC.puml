@startuml
start
:启动容器**ClassPathXmlApplicationContext**;
:执行**AbstractApplicationContext#refresh**;
:执行**AbstractApplicationContext#obtainFreshBeanFactory**加载BeanDefinition;
:执行**AbstractApplicationContext#postProcessBeanFactory**注册当前容器自己定义的BeanPostProcessor;
partition 执行**AbstractApplicationContext#invokeBeanFactoryPostProcessors** {
#Grey:执行以下方法对工厂定义信息进行后处理
----
**BeanDefinitionRegistryPostProcessor#postProcessBeanDefinitionRegistry**
**BeanFactoryPostProcessor#postProcessBeanFactory**
====
即**实例化**所有实现了上述两个接口的类;
note right
容器后处理接口方法:
属于容器级别
比如:PropertyPlaceholderConfigurer
在应用上下文完成之后立即调用(这里可以对BeanDefinition做修改)
end note
}
:执行registerBeanPostProcessors()方法注册Bean后处理方法
----
即**实例化**所有实现了BeanPostProcessor接口(子接口)的类;
:执行finishBeanFactoryInitialization()进行Bean实例;
->调用getBean()实例化单个Bean;
partition 查询缓存的实例 {
:执行DefaultSingletonBeanRegistry#getSingleton
----
使用了三级缓存
====
一级(缓存单例对象): Map<String, Object> singletonObjects
二级(缓存提前暴露的单例对象,解决循环依赖): Map<String, Object> earlySingletonObjects
三级(缓存单例对象工厂,单例实例化后放入该缓存Map): Map<String, ObjectFactory<?>> singletonFactories;
:查询一级缓存: singletonObject = singletonObjects.get(beanName);
if( singletonObject == null && 当前bean正在创建中) then(yes)
:查询二级缓存: singletonObject = earlySingletonObjects.get(beanName);
if(singletonObject == null && 允许提前暴露正在创建中的实例对象) then(yes)
:查询三级缓存:singletonFactory = singletonFactories.get(beanName);
if(singletonFactory != null) then(yes)
:得到单例对象:singletonObject = singletonFactory.getObject()
三级缓存提升到二级缓存:earlySingletonObjects.put(beanName, singletonObject)
删除三级缓存:singletonFactories.remove(beanName);
endif
endif
endif
:返回singletonObject(可能为NULL);
}
#yellow:调用InstantiationAwareBeanPostProcessor的
postProcessBeforeInstantiation()方法;
note right
Bean后处理接口方法(黄色流程):
属于容器级别
顶级接口BeanPostProcessor
这些接口不由Bean实现，独立于Bean
由容器进行加载，在Bean实例化的合适阶段进行调用
并且作用与所有的Bean
Spring AOP就是通过BeanPostProcessor进行实施的
end note
#Green:实例化:**createBeanInstance**;
#DeepSkyBlue:构造函数实例化;
note right
Bean自身方法(蓝色流程):
如调用Bean构造函数实例化
调用Setter设置Bean属性
调用<bean>的init-method初始化
调用<bean>的destory-method销毁
end note
:添加实例对象工厂到三级缓存:addSingletonFactory
----
注意此处是在bean实例化之后才加入三级缓存的,所以Spring无法解决构造函数循环依赖;
#yellow:调用InstantiationAwareBeanPostProcessor的
postProcessAfterInstantiation()方法;
#yellow:调用InstantiationAwareBeanPostProcessor的
postProcessPropertyValues()方法;
#Green:填充属性值:**populateBean**;
#DeepSkyBlue:Setter填充属性值;
#pink:调用BeanNameAware的setBeanName()方法;
note right
Bean级别接口方法(粉色流程):
由Bean自身实现的接口方法
例如Bean实现BeanNameAware接口，
使Bean可以得到BeanName的值
end note
#pink:调用BeanClassLoaderAware的setBeanClassLoader()方法;
#pink:调用BeanFactoryAware的setBeanFactory()方法;
#yellow:调用BeanPostProcessor的postProcessBeforeInitialization()方法;
#Green:初始化:**initializeBean**;
#pink:调用InitializingBean的afterPropertiesSet()方法;
#DeepSkyBlue:通过init-method属性配置的初始方法;
#yellow:调用BeanPostProcessor的postProcessAfterInitialization()方法;
if(Bean作用域) then(singleton)
:将准备就绪的Bean存储于Spring缓冲池中
----
添加到一级缓存,删除二级和三级缓存;
#Red:如果当前bean实现了FactoryBean接口
则需要执行FactoryBean#getObject方法返回bean实例
(这里只画了singleton,其他作用域也由此操作)
----
Mybatis的Mapper对象生成就是通过此方式实例化的;
->容器销毁;
#pink:调用DisposableBean的destroy()方法;
#DeepSkyBlue:通过destory-method属性配置的销毁方法;
else(prototype)
:将准备就绪的Bean交给调用者，从此摆脱Spring的生命周期管理;
endif

stop
@enduml
