<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentScriptType="application/ecmascript" contentStyleType="text/css" height="528px" preserveAspectRatio="none" style="width:973px;height:528px;" version="1.1" viewBox="0 0 973 528"
    width="973px" zoomAndPan="magnify"><defs><filter height="300%" id="f1f1pvdihhp78j" width="300%" x="-1" y="-1"><feGaussianBlur result="blurOut" stdDeviation="2.0"/><feColorMatrix in="blurOut" result="blurOut2" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 .4 0"/><feOffset dx="4.0" dy="4.0" in="blurOut2" result="blurOut3"/><feBlend in="SourceGraphic" in2="blurOut3" mode="normal"/></filter></defs><g><ellipse cx="148.5" cy="20" fill="#000000" filter="url(#f1f1pvdihhp78j)" rx="10" ry="10" style="stroke: none; stroke-width: 1.0;"/><rect fill="#FEFECE" filter="url(#f1f1pvdihhp78j)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="144" x="76.5" y="50"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="124" x="86.5" y="71.6016">Spring初始化Bean完成</text><rect fill="#FEFECE" filter="url(#f1f1pvdihhp78j)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="188" x="54.5" y="104.1328"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="168" x="64.5" y="125.7344">遍历所有的BeanPostProcessor</text><rect fill="#FEFECE" filter="url(#f1f1pvdihhp78j)" height="48.2656" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="277" x="10" y="158.2656"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="257" x="20" y="179.8672">执行InfrastructureAdvisorAutoProxyCreator的</text><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="197" x="20" y="194">postProcessAfterInitialization()方法</text><rect fill="#FEFECE" filter="url(#f1f1pvdihhp78j)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="183" x="57" y="226.5313"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="163" x="67" y="248.1328">查询所有实现了Advisor的切面</text><polygon fill="#FBFB77" filter="url(#f1f1pvdihhp78j)" points="252.5,270.6641,252.5,357.2168,681.5,357.2168,681.5,280.6641,671.5,270.6641,252.5,270.6641" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FBFB77" points="252.5,270.6641,252.5,309.9404,232.5,313.9404,252.5,317.9404,252.5,357.2168,681.5,357.2168,681.5,280.6641,671.5,270.6641,252.5,270.6641" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="671.5" x2="671.5" y1="270.6641" y2="280.6641"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="681.5" x2="671.5" y1="280.6641" y2="280.6641"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="154" x="258.5" y="288.2324">从Advisor中获得PointCut</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="185" x="258.5" y="303.543">去执行PointCut的matches方法</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="118" x="258.5" y="318.8535">matches方法又调用</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="408" x="258.5" y="334.1641">AnnotationTransactionAttributeSource#getTransactionAttribute()</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="278" x="258.5" y="349.4746">去匹配@Transactional注解，并保存注解的内容</text><rect fill="#FEFECE" filter="url(#f1f1pvdihhp78j)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="168" x="64.5" y="296.874"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="148" x="74.5" y="318.4756">查找与当前Bean匹配的切面</text><polygon fill="#FBFB77" filter="url(#f1f1pvdihhp78j)" points="208.5,367.2168,208.5,423.1484,951.5,423.1484,951.5,377.2168,941.5,367.2168,208.5,367.2168" style="stroke: #A80036; stroke-width: 1.0;"/><polygon fill="#FBFB77" points="208.5,367.2168,208.5,391.1826,188.5,395.1826,208.5,399.1826,208.5,423.1484,951.5,423.1484,951.5,377.2168,941.5,367.2168,208.5,367.2168" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="941.5" x2="941.5" y1="367.2168" y2="377.2168"/><line style="stroke: #A80036; stroke-width: 1.0;" x1="951.5" x2="941.5" y1="377.2168" y2="377.2168"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="560" x="214.5" y="384.7852">使用JdkDynamicAopProxy(该类实现了InvocationHandler接口)类的getProxy方法生成代理类。</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="574" x="214.5" y="400.0957">该方法调用了jdk的动态代理api: Proxy.newProxyInstance(classLoader, proxiedInterfaces, this)</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacingAndGlyphs" textLength="722" x="214.5" y="415.4063">参数this就是JdkDynamicAopProxy类本身，该类将匹配的切面(包含TransactionInterceptor)保存在了自身的属性advised中</text><rect fill="#FEFECE" filter="url(#f1f1pvdihhp78j)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="80" x="108.5" y="378.1162"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="60" x="118.5" y="399.7178">创建代理类</text><rect fill="#FEFECE" filter="url(#f1f1pvdihhp78j)" height="34.1328" rx="12.5" ry="12.5" style="stroke: #A80036; stroke-width: 1.5;" width="68" x="114.5" y="443.1484"/><text fill="#000000" font-family="sans-serif" font-size="12" lengthAdjust="spacingAndGlyphs" textLength="48" x="124.5" y="464.75">加入容器</text><ellipse cx="148.5" cy="507.2813" fill="#FFFFFF" filter="url(#f1f1pvdihhp78j)" rx="10" ry="10" style="stroke: #000000; stroke-width: 1.5;"/><line style="stroke: #000000; stroke-width: 2.5;" x1="142.3128" x2="154.6872" y1="501.0941" y2="513.4684"/><line style="stroke: #000000; stroke-width: 2.5;" x1="154.6872" x2="142.3128" y1="501.0941" y2="513.4684"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="148.5" x2="148.5" y1="30" y2="50"/><polygon fill="#A80036" points="144.5,40,148.5,50,152.5,40,148.5,44" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="148.5" x2="148.5" y1="84.1328" y2="104.1328"/><polygon fill="#A80036" points="144.5,94.1328,148.5,104.1328,152.5,94.1328,148.5,98.1328" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="148.5" x2="148.5" y1="138.2656" y2="158.2656"/><polygon fill="#A80036" points="144.5,148.2656,148.5,158.2656,152.5,148.2656,148.5,152.2656" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="148.5" x2="148.5" y1="206.5313" y2="226.5313"/><polygon fill="#A80036" points="144.5,216.5313,148.5,226.5313,152.5,216.5313,148.5,220.5313" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="148.5" x2="148.5" y1="260.6641" y2="296.874"/><polygon fill="#A80036" points="144.5,286.874,148.5,296.874,152.5,286.874,148.5,290.874" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="148.5" x2="148.5" y1="331.0068" y2="378.1162"/><polygon fill="#A80036" points="144.5,368.1162,148.5,378.1162,152.5,368.1162,148.5,372.1162" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="148.5" x2="148.5" y1="412.249" y2="443.1484"/><polygon fill="#A80036" points="144.5,433.1484,148.5,443.1484,152.5,433.1484,148.5,437.1484" style="stroke: #A80036; stroke-width: 1.0;"/><line style="stroke: #A80036; stroke-width: 1.5;" x1="148.5" x2="148.5" y1="477.2813" y2="497.2813"/><polygon fill="#A80036" points="144.5,487.2813,148.5,497.2813,152.5,487.2813,148.5,491.2813" style="stroke: #A80036; stroke-width: 1.0;"/><!--
@startuml
start
:Spring初始化Bean完成;
:遍历所有的BeanPostProcessor;
:执行InfrastructureAdvisorAutoProxyCreator的
postProcessAfterInitialization()方法;
:查询所有实现了Advisor的切面;
:查找与当前Bean匹配的切面;
note right
从Advisor中获得PointCut
去执行PointCut的matches方法
matches方法又调用
AnnotationTransactionAttributeSource#getTransactionAttribute()
去匹配@Transactional注解，并保存注解的内容
end note
:创建代理类;
note right
使用JdkDynamicAopProxy(该类实现了InvocationHandler接口)类的getProxy方法生成代理类。
该方法调用了jdk的动态代理api: Proxy.newProxyInstance(classLoader, proxiedInterfaces, this)
参数this就是JdkDynamicAopProxy类本身，该类将匹配的切面(包含TransactionInterceptor)保存在了自身的属性advised中
end note
:加入容器;
end
@enduml

PlantUML version 1.2017.16(Sun Sep 03 18:53:37 CST 2017)
(GPL source distribution)
Java Runtime: Java(TM) SE Runtime Environment
JVM: Java HotSpot(TM) 64-Bit Server VM
Java Version: 1.8.0_121-b13
Operating System: Mac OS X
OS Version: 10.13.1
Default Encoding: US-ASCII
Language: zh
Country: CN
--></g></svg>